// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file_processor.proto

#include "file_processor.pb.h"
#include "file_processor.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace file_processor {

static const char* FileProcessorService_method_names[] = {
  "/file_processor.FileProcessorService/CompressPDF",
  "/file_processor.FileProcessorService/ConvertToTXT",
  "/file_processor.FileProcessorService/ConvertImageFormat",
  "/file_processor.FileProcessorService/ResizeImage",
};

std::unique_ptr< FileProcessorService::Stub> FileProcessorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileProcessorService::Stub> stub(new FileProcessorService::Stub(channel, options));
  return stub;
}

FileProcessorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CompressPDF_(FileProcessorService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ConvertToTXT_(FileProcessorService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ConvertImageFormat_(FileProcessorService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ResizeImage_(FileProcessorService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::CompressPDFRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), rpcmethod_CompressPDF_, context);
}

void FileProcessorService::Stub::async::CompressPDF(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::file_processor::FileRequest,::file_processor::FileResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_CompressPDF_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::AsyncCompressPDFRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), cq, rpcmethod_CompressPDF_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::PrepareAsyncCompressPDFRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), cq, rpcmethod_CompressPDF_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::ConvertToTXTRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), rpcmethod_ConvertToTXT_, context);
}

void FileProcessorService::Stub::async::ConvertToTXT(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::file_processor::FileRequest,::file_processor::FileResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ConvertToTXT_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::AsyncConvertToTXTRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), cq, rpcmethod_ConvertToTXT_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::PrepareAsyncConvertToTXTRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), cq, rpcmethod_ConvertToTXT_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::ConvertImageFormatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), rpcmethod_ConvertImageFormat_, context);
}

void FileProcessorService::Stub::async::ConvertImageFormat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::file_processor::FileRequest,::file_processor::FileResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ConvertImageFormat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::AsyncConvertImageFormatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), cq, rpcmethod_ConvertImageFormat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::PrepareAsyncConvertImageFormatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), cq, rpcmethod_ConvertImageFormat_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::ResizeImageRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), rpcmethod_ResizeImage_, context);
}

void FileProcessorService::Stub::async::ResizeImage(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::file_processor::FileRequest,::file_processor::FileResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ResizeImage_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::AsyncResizeImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), cq, rpcmethod_ResizeImage_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* FileProcessorService::Stub::PrepareAsyncResizeImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileRequest, ::file_processor::FileResponse>::Create(channel_.get(), cq, rpcmethod_ResizeImage_, context, false, nullptr);
}

FileProcessorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcessorService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FileProcessorService::Service, ::file_processor::FileRequest, ::file_processor::FileResponse>(
          [](FileProcessorService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::file_processor::FileResponse,
             ::file_processor::FileRequest>* stream) {
               return service->CompressPDF(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcessorService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FileProcessorService::Service, ::file_processor::FileRequest, ::file_processor::FileResponse>(
          [](FileProcessorService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::file_processor::FileResponse,
             ::file_processor::FileRequest>* stream) {
               return service->ConvertToTXT(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcessorService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FileProcessorService::Service, ::file_processor::FileRequest, ::file_processor::FileResponse>(
          [](FileProcessorService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::file_processor::FileResponse,
             ::file_processor::FileRequest>* stream) {
               return service->ConvertImageFormat(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcessorService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FileProcessorService::Service, ::file_processor::FileRequest, ::file_processor::FileResponse>(
          [](FileProcessorService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::file_processor::FileResponse,
             ::file_processor::FileRequest>* stream) {
               return service->ResizeImage(ctx, stream);
             }, this)));
}

FileProcessorService::Service::~Service() {
}

::grpc::Status FileProcessorService::Service::CompressPDF(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileProcessorService::Service::ConvertToTXT(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileProcessorService::Service::ConvertImageFormat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileProcessorService::Service::ResizeImage(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace file_processor

