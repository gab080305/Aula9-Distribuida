// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file_processor.proto
#ifndef GRPC_file_5fprocessor_2eproto__INCLUDED
#define GRPC_file_5fprocessor_2eproto__INCLUDED

#include "file_processor.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace file_processor {

class FileProcessorService final {
 public:
  static constexpr char const* service_full_name() {
    return "file_processor.FileProcessorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> CompressPDF(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(CompressPDFRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> AsyncCompressPDF(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(AsyncCompressPDFRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> PrepareAsyncCompressPDF(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(PrepareAsyncCompressPDFRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> ConvertToTXT(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(ConvertToTXTRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> AsyncConvertToTXT(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(AsyncConvertToTXTRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> PrepareAsyncConvertToTXT(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(PrepareAsyncConvertToTXTRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> ConvertImageFormat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(ConvertImageFormatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> AsyncConvertImageFormat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(AsyncConvertImageFormatRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> PrepareAsyncConvertImageFormat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(PrepareAsyncConvertImageFormatRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> ResizeImage(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(ResizeImageRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> AsyncResizeImage(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(AsyncResizeImageRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>> PrepareAsyncResizeImage(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>>(PrepareAsyncResizeImageRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CompressPDF(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) = 0;
      virtual void ConvertToTXT(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) = 0;
      virtual void ConvertImageFormat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) = 0;
      virtual void ResizeImage(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* CompressPDFRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* AsyncCompressPDFRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* PrepareAsyncCompressPDFRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* ConvertToTXTRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* AsyncConvertToTXTRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* PrepareAsyncConvertToTXTRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* ConvertImageFormatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* AsyncConvertImageFormatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* PrepareAsyncConvertImageFormatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* ResizeImageRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* AsyncResizeImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::file_processor::FileRequest, ::file_processor::FileResponse>* PrepareAsyncResizeImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> CompressPDF(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(CompressPDFRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> AsyncCompressPDF(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(AsyncCompressPDFRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> PrepareAsyncCompressPDF(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(PrepareAsyncCompressPDFRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> ConvertToTXT(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(ConvertToTXTRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> AsyncConvertToTXT(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(AsyncConvertToTXTRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> PrepareAsyncConvertToTXT(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(PrepareAsyncConvertToTXTRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> ConvertImageFormat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(ConvertImageFormatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> AsyncConvertImageFormat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(AsyncConvertImageFormatRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> PrepareAsyncConvertImageFormat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(PrepareAsyncConvertImageFormatRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> ResizeImage(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(ResizeImageRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> AsyncResizeImage(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(AsyncResizeImageRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>> PrepareAsyncResizeImage(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>>(PrepareAsyncResizeImageRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CompressPDF(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) override;
      void ConvertToTXT(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) override;
      void ConvertImageFormat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) override;
      void ResizeImage(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileRequest,::file_processor::FileResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* CompressPDFRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* AsyncCompressPDFRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* PrepareAsyncCompressPDFRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* ConvertToTXTRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* AsyncConvertToTXTRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* PrepareAsyncConvertToTXTRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* ConvertImageFormatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* AsyncConvertImageFormatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* PrepareAsyncConvertImageFormatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* ResizeImageRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* AsyncResizeImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::file_processor::FileRequest, ::file_processor::FileResponse>* PrepareAsyncResizeImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CompressPDF_;
    const ::grpc::internal::RpcMethod rpcmethod_ConvertToTXT_;
    const ::grpc::internal::RpcMethod rpcmethod_ConvertImageFormat_;
    const ::grpc::internal::RpcMethod rpcmethod_ResizeImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CompressPDF(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream);
    virtual ::grpc::Status ConvertToTXT(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream);
    virtual ::grpc::Status ConvertImageFormat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream);
    virtual ::grpc::Status ResizeImage(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_CompressPDF : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CompressPDF() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CompressPDF() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompressPDF(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompressPDF(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConvertToTXT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConvertToTXT() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ConvertToTXT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertToTXT(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConvertToTXT(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConvertImageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConvertImageFormat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ConvertImageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertImageFormat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConvertImageFormat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResizeImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResizeImage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ResizeImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResizeImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResizeImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CompressPDF<WithAsyncMethod_ConvertToTXT<WithAsyncMethod_ConvertImageFormat<WithAsyncMethod_ResizeImage<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CompressPDF : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CompressPDF() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::file_processor::FileRequest, ::file_processor::FileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CompressPDF(context); }));
    }
    ~WithCallbackMethod_CompressPDF() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompressPDF(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::file_processor::FileRequest, ::file_processor::FileResponse>* CompressPDF(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConvertToTXT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConvertToTXT() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::file_processor::FileRequest, ::file_processor::FileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ConvertToTXT(context); }));
    }
    ~WithCallbackMethod_ConvertToTXT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertToTXT(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::file_processor::FileRequest, ::file_processor::FileResponse>* ConvertToTXT(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConvertImageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConvertImageFormat() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::file_processor::FileRequest, ::file_processor::FileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ConvertImageFormat(context); }));
    }
    ~WithCallbackMethod_ConvertImageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertImageFormat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::file_processor::FileRequest, ::file_processor::FileResponse>* ConvertImageFormat(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResizeImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResizeImage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::file_processor::FileRequest, ::file_processor::FileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ResizeImage(context); }));
    }
    ~WithCallbackMethod_ResizeImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResizeImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::file_processor::FileRequest, ::file_processor::FileResponse>* ResizeImage(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_CompressPDF<WithCallbackMethod_ConvertToTXT<WithCallbackMethod_ConvertImageFormat<WithCallbackMethod_ResizeImage<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CompressPDF : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CompressPDF() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CompressPDF() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompressPDF(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConvertToTXT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConvertToTXT() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ConvertToTXT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertToTXT(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConvertImageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConvertImageFormat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ConvertImageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertImageFormat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResizeImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResizeImage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ResizeImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResizeImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CompressPDF : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CompressPDF() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CompressPDF() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompressPDF(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompressPDF(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConvertToTXT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConvertToTXT() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ConvertToTXT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertToTXT(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConvertToTXT(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConvertImageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConvertImageFormat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ConvertImageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertImageFormat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConvertImageFormat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResizeImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResizeImage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ResizeImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResizeImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResizeImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CompressPDF : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CompressPDF() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CompressPDF(context); }));
    }
    ~WithRawCallbackMethod_CompressPDF() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompressPDF(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CompressPDF(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConvertToTXT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConvertToTXT() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ConvertToTXT(context); }));
    }
    ~WithRawCallbackMethod_ConvertToTXT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertToTXT(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ConvertToTXT(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConvertImageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConvertImageFormat() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ConvertImageFormat(context); }));
    }
    ~WithRawCallbackMethod_ConvertImageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConvertImageFormat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ConvertImageFormat(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResizeImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResizeImage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ResizeImage(context); }));
    }
    ~WithRawCallbackMethod_ResizeImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResizeImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::file_processor::FileResponse, ::file_processor::FileRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ResizeImage(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace file_processor


#endif  // GRPC_file_5fprocessor_2eproto__INCLUDED
