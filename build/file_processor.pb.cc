// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_processor.proto

#include "file_processor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace file_processor {
PROTOBUF_CONSTEXPR FileChunk::FileChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileChunkDefaultTypeInternal() {}
  union {
    FileChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileChunkDefaultTypeInternal _FileChunk_default_instance_;
PROTOBUF_CONSTEXPR FileRequest::FileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_content_)*/nullptr
  , /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileRequestDefaultTypeInternal() {}
  union {
    FileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileRequestDefaultTypeInternal _FileRequest_default_instance_;
PROTOBUF_CONSTEXPR CompressPDFRequest::CompressPDFRequest(
    ::_pbi::ConstantInitialized) {}
struct CompressPDFRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompressPDFRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompressPDFRequestDefaultTypeInternal() {}
  union {
    CompressPDFRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompressPDFRequestDefaultTypeInternal _CompressPDFRequest_default_instance_;
PROTOBUF_CONSTEXPR ConvertToTXTRequest::ConvertToTXTRequest(
    ::_pbi::ConstantInitialized) {}
struct ConvertToTXTRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConvertToTXTRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConvertToTXTRequestDefaultTypeInternal() {}
  union {
    ConvertToTXTRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConvertToTXTRequestDefaultTypeInternal _ConvertToTXTRequest_default_instance_;
PROTOBUF_CONSTEXPR ConvertImageFormatRequest::ConvertImageFormatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConvertImageFormatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConvertImageFormatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConvertImageFormatRequestDefaultTypeInternal() {}
  union {
    ConvertImageFormatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConvertImageFormatRequestDefaultTypeInternal _ConvertImageFormatRequest_default_instance_;
PROTOBUF_CONSTEXPR ResizeImageRequest::ResizeImageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResizeImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResizeImageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResizeImageRequestDefaultTypeInternal() {}
  union {
    ResizeImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResizeImageRequestDefaultTypeInternal _ResizeImageRequest_default_instance_;
PROTOBUF_CONSTEXPR FileResponse::FileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_content_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileResponseDefaultTypeInternal() {}
  union {
    FileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileResponseDefaultTypeInternal _FileResponse_default_instance_;
}  // namespace file_processor
static ::_pb::Metadata file_level_metadata_file_5fprocessor_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_file_5fprocessor_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_file_5fprocessor_2eproto = nullptr;

const uint32_t TableStruct_file_5fprocessor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_processor::FileChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_processor::FileChunk, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_processor::FileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::file_processor::FileRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_processor::FileRequest, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::file_processor::FileRequest, _impl_.file_content_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::file_processor::FileRequest, _impl_.parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_processor::CompressPDFRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_processor::ConvertToTXTRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_processor::ConvertImageFormatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_processor::ConvertImageFormatRequest, _impl_.output_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_processor::ResizeImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_processor::ResizeImageRequest, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::file_processor::ResizeImageRequest, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_processor::FileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_processor::FileResponse, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::file_processor::FileResponse, _impl_.file_content_),
  PROTOBUF_FIELD_OFFSET(::file_processor::FileResponse, _impl_.status_message_),
  PROTOBUF_FIELD_OFFSET(::file_processor::FileResponse, _impl_.success_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::file_processor::FileChunk)},
  { 7, -1, -1, sizeof(::file_processor::FileRequest)},
  { 20, -1, -1, sizeof(::file_processor::CompressPDFRequest)},
  { 26, -1, -1, sizeof(::file_processor::ConvertToTXTRequest)},
  { 32, -1, -1, sizeof(::file_processor::ConvertImageFormatRequest)},
  { 39, -1, -1, sizeof(::file_processor::ResizeImageRequest)},
  { 47, -1, -1, sizeof(::file_processor::FileResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::file_processor::_FileChunk_default_instance_._instance,
  &::file_processor::_FileRequest_default_instance_._instance,
  &::file_processor::_CompressPDFRequest_default_instance_._instance,
  &::file_processor::_ConvertToTXTRequest_default_instance_._instance,
  &::file_processor::_ConvertImageFormatRequest_default_instance_._instance,
  &::file_processor::_ResizeImageRequest_default_instance_._instance,
  &::file_processor::_FileResponse_default_instance_._instance,
};

const char descriptor_table_protodef_file_5fprocessor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024file_processor.proto\022\016file_processor\"\034"
  "\n\tFileChunk\022\017\n\007content\030\001 \001(\014\"\375\002\n\013FileReq"
  "uest\022\021\n\tfile_name\030\001 \001(\t\022/\n\014file_content\030"
  "\002 \001(\0132\031.file_processor.FileChunk\022A\n\023comp"
  "ress_pdf_params\030\003 \001(\0132\".file_processor.C"
  "ompressPDFRequestH\000\022D\n\025convert_to_txt_pa"
  "rams\030\004 \001(\0132#.file_processor.ConvertToTXT"
  "RequestH\000\022P\n\033convert_image_format_params"
  "\030\005 \001(\0132).file_processor.ConvertImageForm"
  "atRequestH\000\022A\n\023resize_image_params\030\006 \001(\013"
  "2\".file_processor.ResizeImageRequestH\000B\014"
  "\n\nparameters\"\024\n\022CompressPDFRequest\"\025\n\023Co"
  "nvertToTXTRequest\"2\n\031ConvertImageFormatR"
  "equest\022\025\n\routput_format\030\001 \001(\t\"3\n\022ResizeI"
  "mageRequest\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001"
  "(\005\"{\n\014FileResponse\022\021\n\tfile_name\030\001 \001(\t\022/\n"
  "\014file_content\030\002 \001(\0132\031.file_processor.Fil"
  "eChunk\022\026\n\016status_message\030\003 \001(\t\022\017\n\007succes"
  "s\030\004 \001(\0102\326\002\n\024FileProcessorService\022L\n\013Comp"
  "ressPDF\022\033.file_processor.FileRequest\032\034.f"
  "ile_processor.FileResponse(\0010\001\022M\n\014Conver"
  "tToTXT\022\033.file_processor.FileRequest\032\034.fi"
  "le_processor.FileResponse(\0010\001\022S\n\022Convert"
  "ImageFormat\022\033.file_processor.FileRequest"
  "\032\034.file_processor.FileResponse(\0010\001\022L\n\013Re"
  "sizeImage\022\033.file_processor.FileRequest\032\034"
  ".file_processor.FileResponse(\0010\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_file_5fprocessor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_file_5fprocessor_2eproto = {
    false, false, 1080, descriptor_table_protodef_file_5fprocessor_2eproto,
    "file_processor.proto",
    &descriptor_table_file_5fprocessor_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_file_5fprocessor_2eproto::offsets,
    file_level_metadata_file_5fprocessor_2eproto, file_level_enum_descriptors_file_5fprocessor_2eproto,
    file_level_service_descriptors_file_5fprocessor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_file_5fprocessor_2eproto_getter() {
  return &descriptor_table_file_5fprocessor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_file_5fprocessor_2eproto(&descriptor_table_file_5fprocessor_2eproto);
namespace file_processor {

// ===================================================================

class FileChunk::_Internal {
 public:
};

FileChunk::FileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_processor.FileChunk)
}
FileChunk::FileChunk(const FileChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:file_processor.FileChunk)
}

inline void FileChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileChunk::~FileChunk() {
  // @@protoc_insertion_point(destructor:file_processor.FileChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void FileChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:file_processor.FileChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_processor.FileChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_processor.FileChunk)
  return target;
}

size_t FileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_processor.FileChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileChunk::GetClassData() const { return &_class_data_; }


void FileChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileChunk*>(&to_msg);
  auto& from = static_cast<const FileChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_processor.FileChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileChunk::CopyFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_processor.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChunk::IsInitialized() const {
  return true;
}

void FileChunk::InternalSwap(FileChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fprocessor_2eproto_getter, &descriptor_table_file_5fprocessor_2eproto_once,
      file_level_metadata_file_5fprocessor_2eproto[0]);
}

// ===================================================================

class FileRequest::_Internal {
 public:
  static const ::file_processor::FileChunk& file_content(const FileRequest* msg);
  static const ::file_processor::CompressPDFRequest& compress_pdf_params(const FileRequest* msg);
  static const ::file_processor::ConvertToTXTRequest& convert_to_txt_params(const FileRequest* msg);
  static const ::file_processor::ConvertImageFormatRequest& convert_image_format_params(const FileRequest* msg);
  static const ::file_processor::ResizeImageRequest& resize_image_params(const FileRequest* msg);
};

const ::file_processor::FileChunk&
FileRequest::_Internal::file_content(const FileRequest* msg) {
  return *msg->_impl_.file_content_;
}
const ::file_processor::CompressPDFRequest&
FileRequest::_Internal::compress_pdf_params(const FileRequest* msg) {
  return *msg->_impl_.parameters_.compress_pdf_params_;
}
const ::file_processor::ConvertToTXTRequest&
FileRequest::_Internal::convert_to_txt_params(const FileRequest* msg) {
  return *msg->_impl_.parameters_.convert_to_txt_params_;
}
const ::file_processor::ConvertImageFormatRequest&
FileRequest::_Internal::convert_image_format_params(const FileRequest* msg) {
  return *msg->_impl_.parameters_.convert_image_format_params_;
}
const ::file_processor::ResizeImageRequest&
FileRequest::_Internal::resize_image_params(const FileRequest* msg) {
  return *msg->_impl_.parameters_.resize_image_params_;
}
void FileRequest::set_allocated_compress_pdf_params(::file_processor::CompressPDFRequest* compress_pdf_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameters();
  if (compress_pdf_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compress_pdf_params);
    if (message_arena != submessage_arena) {
      compress_pdf_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compress_pdf_params, submessage_arena);
    }
    set_has_compress_pdf_params();
    _impl_.parameters_.compress_pdf_params_ = compress_pdf_params;
  }
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileRequest.compress_pdf_params)
}
void FileRequest::set_allocated_convert_to_txt_params(::file_processor::ConvertToTXTRequest* convert_to_txt_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameters();
  if (convert_to_txt_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(convert_to_txt_params);
    if (message_arena != submessage_arena) {
      convert_to_txt_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convert_to_txt_params, submessage_arena);
    }
    set_has_convert_to_txt_params();
    _impl_.parameters_.convert_to_txt_params_ = convert_to_txt_params;
  }
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileRequest.convert_to_txt_params)
}
void FileRequest::set_allocated_convert_image_format_params(::file_processor::ConvertImageFormatRequest* convert_image_format_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameters();
  if (convert_image_format_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(convert_image_format_params);
    if (message_arena != submessage_arena) {
      convert_image_format_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convert_image_format_params, submessage_arena);
    }
    set_has_convert_image_format_params();
    _impl_.parameters_.convert_image_format_params_ = convert_image_format_params;
  }
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileRequest.convert_image_format_params)
}
void FileRequest::set_allocated_resize_image_params(::file_processor::ResizeImageRequest* resize_image_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameters();
  if (resize_image_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resize_image_params);
    if (message_arena != submessage_arena) {
      resize_image_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resize_image_params, submessage_arena);
    }
    set_has_resize_image_params();
    _impl_.parameters_.resize_image_params_ = resize_image_params;
  }
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileRequest.resize_image_params)
}
FileRequest::FileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_processor.FileRequest)
}
FileRequest::FileRequest(const FileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.file_content_){nullptr}
    , decltype(_impl_.parameters_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_file_content()) {
    _this->_impl_.file_content_ = new ::file_processor::FileChunk(*from._impl_.file_content_);
  }
  clear_has_parameters();
  switch (from.parameters_case()) {
    case kCompressPdfParams: {
      _this->_internal_mutable_compress_pdf_params()->::file_processor::CompressPDFRequest::MergeFrom(
          from._internal_compress_pdf_params());
      break;
    }
    case kConvertToTxtParams: {
      _this->_internal_mutable_convert_to_txt_params()->::file_processor::ConvertToTXTRequest::MergeFrom(
          from._internal_convert_to_txt_params());
      break;
    }
    case kConvertImageFormatParams: {
      _this->_internal_mutable_convert_image_format_params()->::file_processor::ConvertImageFormatRequest::MergeFrom(
          from._internal_convert_image_format_params());
      break;
    }
    case kResizeImageParams: {
      _this->_internal_mutable_resize_image_params()->::file_processor::ResizeImageRequest::MergeFrom(
          from._internal_resize_image_params());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:file_processor.FileRequest)
}

inline void FileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.file_content_){nullptr}
    , decltype(_impl_.parameters_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_parameters();
}

FileRequest::~FileRequest() {
  // @@protoc_insertion_point(destructor:file_processor.FileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.file_content_;
  if (has_parameters()) {
    clear_parameters();
  }
}

void FileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileRequest::clear_parameters() {
// @@protoc_insertion_point(one_of_clear_start:file_processor.FileRequest)
  switch (parameters_case()) {
    case kCompressPdfParams: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.parameters_.compress_pdf_params_;
      }
      break;
    }
    case kConvertToTxtParams: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.parameters_.convert_to_txt_params_;
      }
      break;
    }
    case kConvertImageFormatParams: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.parameters_.convert_image_format_params_;
      }
      break;
    }
    case kResizeImageParams: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.parameters_.resize_image_params_;
      }
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PARAMETERS_NOT_SET;
}


void FileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:file_processor.FileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.file_content_ != nullptr) {
    delete _impl_.file_content_;
  }
  _impl_.file_content_ = nullptr;
  clear_parameters();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "file_processor.FileRequest.file_name"));
        } else
          goto handle_unusual;
        continue;
      // .file_processor.FileChunk file_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .file_processor.CompressPDFRequest compress_pdf_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_compress_pdf_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .file_processor.ConvertToTXTRequest convert_to_txt_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_convert_to_txt_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .file_processor.ConvertImageFormatRequest convert_image_format_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_convert_image_format_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .file_processor.ResizeImageRequest resize_image_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resize_image_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_processor.FileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "file_processor.FileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // .file_processor.FileChunk file_content = 2;
  if (this->_internal_has_file_content()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::file_content(this),
        _Internal::file_content(this).GetCachedSize(), target, stream);
  }

  // .file_processor.CompressPDFRequest compress_pdf_params = 3;
  if (_internal_has_compress_pdf_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::compress_pdf_params(this),
        _Internal::compress_pdf_params(this).GetCachedSize(), target, stream);
  }

  // .file_processor.ConvertToTXTRequest convert_to_txt_params = 4;
  if (_internal_has_convert_to_txt_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::convert_to_txt_params(this),
        _Internal::convert_to_txt_params(this).GetCachedSize(), target, stream);
  }

  // .file_processor.ConvertImageFormatRequest convert_image_format_params = 5;
  if (_internal_has_convert_image_format_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::convert_image_format_params(this),
        _Internal::convert_image_format_params(this).GetCachedSize(), target, stream);
  }

  // .file_processor.ResizeImageRequest resize_image_params = 6;
  if (_internal_has_resize_image_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::resize_image_params(this),
        _Internal::resize_image_params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_processor.FileRequest)
  return target;
}

size_t FileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_processor.FileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .file_processor.FileChunk file_content = 2;
  if (this->_internal_has_file_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_content_);
  }

  switch (parameters_case()) {
    // .file_processor.CompressPDFRequest compress_pdf_params = 3;
    case kCompressPdfParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parameters_.compress_pdf_params_);
      break;
    }
    // .file_processor.ConvertToTXTRequest convert_to_txt_params = 4;
    case kConvertToTxtParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parameters_.convert_to_txt_params_);
      break;
    }
    // .file_processor.ConvertImageFormatRequest convert_image_format_params = 5;
    case kConvertImageFormatParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parameters_.convert_image_format_params_);
      break;
    }
    // .file_processor.ResizeImageRequest resize_image_params = 6;
    case kResizeImageParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parameters_.resize_image_params_);
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileRequest::GetClassData() const { return &_class_data_; }


void FileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileRequest*>(&to_msg);
  auto& from = static_cast<const FileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_processor.FileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_file_content()) {
    _this->_internal_mutable_file_content()->::file_processor::FileChunk::MergeFrom(
        from._internal_file_content());
  }
  switch (from.parameters_case()) {
    case kCompressPdfParams: {
      _this->_internal_mutable_compress_pdf_params()->::file_processor::CompressPDFRequest::MergeFrom(
          from._internal_compress_pdf_params());
      break;
    }
    case kConvertToTxtParams: {
      _this->_internal_mutable_convert_to_txt_params()->::file_processor::ConvertToTXTRequest::MergeFrom(
          from._internal_convert_to_txt_params());
      break;
    }
    case kConvertImageFormatParams: {
      _this->_internal_mutable_convert_image_format_params()->::file_processor::ConvertImageFormatRequest::MergeFrom(
          from._internal_convert_image_format_params());
      break;
    }
    case kResizeImageParams: {
      _this->_internal_mutable_resize_image_params()->::file_processor::ResizeImageRequest::MergeFrom(
          from._internal_resize_image_params());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileRequest::CopyFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_processor.FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequest::IsInitialized() const {
  return true;
}

void FileRequest::InternalSwap(FileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  swap(_impl_.file_content_, other->_impl_.file_content_);
  swap(_impl_.parameters_, other->_impl_.parameters_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fprocessor_2eproto_getter, &descriptor_table_file_5fprocessor_2eproto_once,
      file_level_metadata_file_5fprocessor_2eproto[1]);
}

// ===================================================================

class CompressPDFRequest::_Internal {
 public:
};

CompressPDFRequest::CompressPDFRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:file_processor.CompressPDFRequest)
}
CompressPDFRequest::CompressPDFRequest(const CompressPDFRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CompressPDFRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:file_processor.CompressPDFRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompressPDFRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompressPDFRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CompressPDFRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fprocessor_2eproto_getter, &descriptor_table_file_5fprocessor_2eproto_once,
      file_level_metadata_file_5fprocessor_2eproto[2]);
}

// ===================================================================

class ConvertToTXTRequest::_Internal {
 public:
};

ConvertToTXTRequest::ConvertToTXTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:file_processor.ConvertToTXTRequest)
}
ConvertToTXTRequest::ConvertToTXTRequest(const ConvertToTXTRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ConvertToTXTRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:file_processor.ConvertToTXTRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvertToTXTRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvertToTXTRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ConvertToTXTRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fprocessor_2eproto_getter, &descriptor_table_file_5fprocessor_2eproto_once,
      file_level_metadata_file_5fprocessor_2eproto[3]);
}

// ===================================================================

class ConvertImageFormatRequest::_Internal {
 public:
};

ConvertImageFormatRequest::ConvertImageFormatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_processor.ConvertImageFormatRequest)
}
ConvertImageFormatRequest::ConvertImageFormatRequest(const ConvertImageFormatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConvertImageFormatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_format_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output_format().empty()) {
    _this->_impl_.output_format_.Set(from._internal_output_format(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:file_processor.ConvertImageFormatRequest)
}

inline void ConvertImageFormatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_format_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.output_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConvertImageFormatRequest::~ConvertImageFormatRequest() {
  // @@protoc_insertion_point(destructor:file_processor.ConvertImageFormatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConvertImageFormatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_format_.Destroy();
}

void ConvertImageFormatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConvertImageFormatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:file_processor.ConvertImageFormatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_format_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvertImageFormatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string output_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "file_processor.ConvertImageFormatRequest.output_format"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConvertImageFormatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_processor.ConvertImageFormatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_format = 1;
  if (!this->_internal_output_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_format().data(), static_cast<int>(this->_internal_output_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "file_processor.ConvertImageFormatRequest.output_format");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_processor.ConvertImageFormatRequest)
  return target;
}

size_t ConvertImageFormatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_processor.ConvertImageFormatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string output_format = 1;
  if (!this->_internal_output_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvertImageFormatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConvertImageFormatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvertImageFormatRequest::GetClassData() const { return &_class_data_; }


void ConvertImageFormatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConvertImageFormatRequest*>(&to_msg);
  auto& from = static_cast<const ConvertImageFormatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_processor.ConvertImageFormatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_output_format().empty()) {
    _this->_internal_set_output_format(from._internal_output_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvertImageFormatRequest::CopyFrom(const ConvertImageFormatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_processor.ConvertImageFormatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertImageFormatRequest::IsInitialized() const {
  return true;
}

void ConvertImageFormatRequest::InternalSwap(ConvertImageFormatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_format_, lhs_arena,
      &other->_impl_.output_format_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvertImageFormatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fprocessor_2eproto_getter, &descriptor_table_file_5fprocessor_2eproto_once,
      file_level_metadata_file_5fprocessor_2eproto[4]);
}

// ===================================================================

class ResizeImageRequest::_Internal {
 public:
};

ResizeImageRequest::ResizeImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_processor.ResizeImageRequest)
}
ResizeImageRequest::ResizeImageRequest(const ResizeImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResizeImageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:file_processor.ResizeImageRequest)
}

inline void ResizeImageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResizeImageRequest::~ResizeImageRequest() {
  // @@protoc_insertion_point(destructor:file_processor.ResizeImageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResizeImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResizeImageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResizeImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:file_processor.ResizeImageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResizeImageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResizeImageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_processor.ResizeImageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_processor.ResizeImageRequest)
  return target;
}

size_t ResizeImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_processor.ResizeImageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResizeImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResizeImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResizeImageRequest::GetClassData() const { return &_class_data_; }


void ResizeImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResizeImageRequest*>(&to_msg);
  auto& from = static_cast<const ResizeImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_processor.ResizeImageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResizeImageRequest::CopyFrom(const ResizeImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_processor.ResizeImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeImageRequest::IsInitialized() const {
  return true;
}

void ResizeImageRequest::InternalSwap(ResizeImageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_.height_)
      + sizeof(ResizeImageRequest::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(ResizeImageRequest, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizeImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fprocessor_2eproto_getter, &descriptor_table_file_5fprocessor_2eproto_once,
      file_level_metadata_file_5fprocessor_2eproto[5]);
}

// ===================================================================

class FileResponse::_Internal {
 public:
  static const ::file_processor::FileChunk& file_content(const FileResponse* msg);
};

const ::file_processor::FileChunk&
FileResponse::_Internal::file_content(const FileResponse* msg) {
  return *msg->_impl_.file_content_;
}
FileResponse::FileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_processor.FileResponse)
}
FileResponse::FileResponse(const FileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.status_message_){}
    , decltype(_impl_.file_content_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_message().empty()) {
    _this->_impl_.status_message_.Set(from._internal_status_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_file_content()) {
    _this->_impl_.file_content_ = new ::file_processor::FileChunk(*from._impl_.file_content_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:file_processor.FileResponse)
}

inline void FileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.status_message_){}
    , decltype(_impl_.file_content_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileResponse::~FileResponse() {
  // @@protoc_insertion_point(destructor:file_processor.FileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
  _impl_.status_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.file_content_;
}

void FileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:file_processor.FileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  _impl_.status_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.file_content_ != nullptr) {
    delete _impl_.file_content_;
  }
  _impl_.file_content_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "file_processor.FileResponse.file_name"));
        } else
          goto handle_unusual;
        continue;
      // .file_processor.FileChunk file_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_status_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "file_processor.FileResponse.status_message"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_processor.FileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "file_processor.FileResponse.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // .file_processor.FileChunk file_content = 2;
  if (this->_internal_has_file_content()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::file_content(this),
        _Internal::file_content(this).GetCachedSize(), target, stream);
  }

  // string status_message = 3;
  if (!this->_internal_status_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_message().data(), static_cast<int>(this->_internal_status_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "file_processor.FileResponse.status_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status_message(), target);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_processor.FileResponse)
  return target;
}

size_t FileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_processor.FileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string status_message = 3;
  if (!this->_internal_status_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_message());
  }

  // .file_processor.FileChunk file_content = 2;
  if (this->_internal_has_file_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_content_);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileResponse::GetClassData() const { return &_class_data_; }


void FileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileResponse*>(&to_msg);
  auto& from = static_cast<const FileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_processor.FileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_status_message().empty()) {
    _this->_internal_set_status_message(from._internal_status_message());
  }
  if (from._internal_has_file_content()) {
    _this->_internal_mutable_file_content()->::file_processor::FileChunk::MergeFrom(
        from._internal_file_content());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileResponse::CopyFrom(const FileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_processor.FileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileResponse::IsInitialized() const {
  return true;
}

void FileResponse::InternalSwap(FileResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_message_, lhs_arena,
      &other->_impl_.status_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileResponse, _impl_.success_)
      + sizeof(FileResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(FileResponse, _impl_.file_content_)>(
          reinterpret_cast<char*>(&_impl_.file_content_),
          reinterpret_cast<char*>(&other->_impl_.file_content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fprocessor_2eproto_getter, &descriptor_table_file_5fprocessor_2eproto_once,
      file_level_metadata_file_5fprocessor_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace file_processor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::file_processor::FileChunk*
Arena::CreateMaybeMessage< ::file_processor::FileChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_processor::FileChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::file_processor::FileRequest*
Arena::CreateMaybeMessage< ::file_processor::FileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_processor::FileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::file_processor::CompressPDFRequest*
Arena::CreateMaybeMessage< ::file_processor::CompressPDFRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_processor::CompressPDFRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::file_processor::ConvertToTXTRequest*
Arena::CreateMaybeMessage< ::file_processor::ConvertToTXTRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_processor::ConvertToTXTRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::file_processor::ConvertImageFormatRequest*
Arena::CreateMaybeMessage< ::file_processor::ConvertImageFormatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_processor::ConvertImageFormatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::file_processor::ResizeImageRequest*
Arena::CreateMaybeMessage< ::file_processor::ResizeImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_processor::ResizeImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::file_processor::FileResponse*
Arena::CreateMaybeMessage< ::file_processor::FileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_processor::FileResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
