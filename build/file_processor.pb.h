// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_processor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fprocessor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fprocessor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fprocessor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fprocessor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fprocessor_2eproto;
namespace file_processor {
class CompressPDFRequest;
struct CompressPDFRequestDefaultTypeInternal;
extern CompressPDFRequestDefaultTypeInternal _CompressPDFRequest_default_instance_;
class ConvertImageFormatRequest;
struct ConvertImageFormatRequestDefaultTypeInternal;
extern ConvertImageFormatRequestDefaultTypeInternal _ConvertImageFormatRequest_default_instance_;
class ConvertToTXTRequest;
struct ConvertToTXTRequestDefaultTypeInternal;
extern ConvertToTXTRequestDefaultTypeInternal _ConvertToTXTRequest_default_instance_;
class FileChunk;
struct FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class FileRequest;
struct FileRequestDefaultTypeInternal;
extern FileRequestDefaultTypeInternal _FileRequest_default_instance_;
class FileResponse;
struct FileResponseDefaultTypeInternal;
extern FileResponseDefaultTypeInternal _FileResponse_default_instance_;
class ResizeImageRequest;
struct ResizeImageRequestDefaultTypeInternal;
extern ResizeImageRequestDefaultTypeInternal _ResizeImageRequest_default_instance_;
}  // namespace file_processor
PROTOBUF_NAMESPACE_OPEN
template<> ::file_processor::CompressPDFRequest* Arena::CreateMaybeMessage<::file_processor::CompressPDFRequest>(Arena*);
template<> ::file_processor::ConvertImageFormatRequest* Arena::CreateMaybeMessage<::file_processor::ConvertImageFormatRequest>(Arena*);
template<> ::file_processor::ConvertToTXTRequest* Arena::CreateMaybeMessage<::file_processor::ConvertToTXTRequest>(Arena*);
template<> ::file_processor::FileChunk* Arena::CreateMaybeMessage<::file_processor::FileChunk>(Arena*);
template<> ::file_processor::FileRequest* Arena::CreateMaybeMessage<::file_processor::FileRequest>(Arena*);
template<> ::file_processor::FileResponse* Arena::CreateMaybeMessage<::file_processor::FileResponse>(Arena*);
template<> ::file_processor::ResizeImageRequest* Arena::CreateMaybeMessage<::file_processor::ResizeImageRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace file_processor {

// ===================================================================

class FileChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_processor.FileChunk) */ {
 public:
  inline FileChunk() : FileChunk(nullptr) {}
  ~FileChunk() override;
  explicit PROTOBUF_CONSTEXPR FileChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileChunk(const FileChunk& from);
  FileChunk(FileChunk&& from) noexcept
    : FileChunk() {
    *this = ::std::move(from);
  }

  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
               &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileChunk& a, FileChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(FileChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileChunk& from) {
    FileChunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_processor.FileChunk";
  }
  protected:
  explicit FileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:file_processor.FileChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class FileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_processor.FileRequest) */ {
 public:
  inline FileRequest() : FileRequest(nullptr) {}
  ~FileRequest() override;
  explicit PROTOBUF_CONSTEXPR FileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileRequest(const FileRequest& from);
  FileRequest(FileRequest&& from) noexcept
    : FileRequest() {
    *this = ::std::move(from);
  }

  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileRequest& operator=(FileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ParametersCase {
    kCompressPdfParams = 3,
    kConvertToTxtParams = 4,
    kConvertImageFormatParams = 5,
    kResizeImageParams = 6,
    PARAMETERS_NOT_SET = 0,
  };

  static inline const FileRequest* internal_default_instance() {
    return reinterpret_cast<const FileRequest*>(
               &_FileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileRequest& a, FileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileRequest& from) {
    FileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_processor.FileRequest";
  }
  protected:
  explicit FileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFileContentFieldNumber = 2,
    kCompressPdfParamsFieldNumber = 3,
    kConvertToTxtParamsFieldNumber = 4,
    kConvertImageFormatParamsFieldNumber = 5,
    kResizeImageParamsFieldNumber = 6,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // .file_processor.FileChunk file_content = 2;
  bool has_file_content() const;
  private:
  bool _internal_has_file_content() const;
  public:
  void clear_file_content();
  const ::file_processor::FileChunk& file_content() const;
  PROTOBUF_NODISCARD ::file_processor::FileChunk* release_file_content();
  ::file_processor::FileChunk* mutable_file_content();
  void set_allocated_file_content(::file_processor::FileChunk* file_content);
  private:
  const ::file_processor::FileChunk& _internal_file_content() const;
  ::file_processor::FileChunk* _internal_mutable_file_content();
  public:
  void unsafe_arena_set_allocated_file_content(
      ::file_processor::FileChunk* file_content);
  ::file_processor::FileChunk* unsafe_arena_release_file_content();

  // .file_processor.CompressPDFRequest compress_pdf_params = 3;
  bool has_compress_pdf_params() const;
  private:
  bool _internal_has_compress_pdf_params() const;
  public:
  void clear_compress_pdf_params();
  const ::file_processor::CompressPDFRequest& compress_pdf_params() const;
  PROTOBUF_NODISCARD ::file_processor::CompressPDFRequest* release_compress_pdf_params();
  ::file_processor::CompressPDFRequest* mutable_compress_pdf_params();
  void set_allocated_compress_pdf_params(::file_processor::CompressPDFRequest* compress_pdf_params);
  private:
  const ::file_processor::CompressPDFRequest& _internal_compress_pdf_params() const;
  ::file_processor::CompressPDFRequest* _internal_mutable_compress_pdf_params();
  public:
  void unsafe_arena_set_allocated_compress_pdf_params(
      ::file_processor::CompressPDFRequest* compress_pdf_params);
  ::file_processor::CompressPDFRequest* unsafe_arena_release_compress_pdf_params();

  // .file_processor.ConvertToTXTRequest convert_to_txt_params = 4;
  bool has_convert_to_txt_params() const;
  private:
  bool _internal_has_convert_to_txt_params() const;
  public:
  void clear_convert_to_txt_params();
  const ::file_processor::ConvertToTXTRequest& convert_to_txt_params() const;
  PROTOBUF_NODISCARD ::file_processor::ConvertToTXTRequest* release_convert_to_txt_params();
  ::file_processor::ConvertToTXTRequest* mutable_convert_to_txt_params();
  void set_allocated_convert_to_txt_params(::file_processor::ConvertToTXTRequest* convert_to_txt_params);
  private:
  const ::file_processor::ConvertToTXTRequest& _internal_convert_to_txt_params() const;
  ::file_processor::ConvertToTXTRequest* _internal_mutable_convert_to_txt_params();
  public:
  void unsafe_arena_set_allocated_convert_to_txt_params(
      ::file_processor::ConvertToTXTRequest* convert_to_txt_params);
  ::file_processor::ConvertToTXTRequest* unsafe_arena_release_convert_to_txt_params();

  // .file_processor.ConvertImageFormatRequest convert_image_format_params = 5;
  bool has_convert_image_format_params() const;
  private:
  bool _internal_has_convert_image_format_params() const;
  public:
  void clear_convert_image_format_params();
  const ::file_processor::ConvertImageFormatRequest& convert_image_format_params() const;
  PROTOBUF_NODISCARD ::file_processor::ConvertImageFormatRequest* release_convert_image_format_params();
  ::file_processor::ConvertImageFormatRequest* mutable_convert_image_format_params();
  void set_allocated_convert_image_format_params(::file_processor::ConvertImageFormatRequest* convert_image_format_params);
  private:
  const ::file_processor::ConvertImageFormatRequest& _internal_convert_image_format_params() const;
  ::file_processor::ConvertImageFormatRequest* _internal_mutable_convert_image_format_params();
  public:
  void unsafe_arena_set_allocated_convert_image_format_params(
      ::file_processor::ConvertImageFormatRequest* convert_image_format_params);
  ::file_processor::ConvertImageFormatRequest* unsafe_arena_release_convert_image_format_params();

  // .file_processor.ResizeImageRequest resize_image_params = 6;
  bool has_resize_image_params() const;
  private:
  bool _internal_has_resize_image_params() const;
  public:
  void clear_resize_image_params();
  const ::file_processor::ResizeImageRequest& resize_image_params() const;
  PROTOBUF_NODISCARD ::file_processor::ResizeImageRequest* release_resize_image_params();
  ::file_processor::ResizeImageRequest* mutable_resize_image_params();
  void set_allocated_resize_image_params(::file_processor::ResizeImageRequest* resize_image_params);
  private:
  const ::file_processor::ResizeImageRequest& _internal_resize_image_params() const;
  ::file_processor::ResizeImageRequest* _internal_mutable_resize_image_params();
  public:
  void unsafe_arena_set_allocated_resize_image_params(
      ::file_processor::ResizeImageRequest* resize_image_params);
  ::file_processor::ResizeImageRequest* unsafe_arena_release_resize_image_params();

  void clear_parameters();
  ParametersCase parameters_case() const;
  // @@protoc_insertion_point(class_scope:file_processor.FileRequest)
 private:
  class _Internal;
  void set_has_compress_pdf_params();
  void set_has_convert_to_txt_params();
  void set_has_convert_image_format_params();
  void set_has_resize_image_params();

  inline bool has_parameters() const;
  inline void clear_has_parameters();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::file_processor::FileChunk* file_content_;
    union ParametersUnion {
      constexpr ParametersUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::file_processor::CompressPDFRequest* compress_pdf_params_;
      ::file_processor::ConvertToTXTRequest* convert_to_txt_params_;
      ::file_processor::ConvertImageFormatRequest* convert_image_format_params_;
      ::file_processor::ResizeImageRequest* resize_image_params_;
    } parameters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class CompressPDFRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:file_processor.CompressPDFRequest) */ {
 public:
  inline CompressPDFRequest() : CompressPDFRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CompressPDFRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompressPDFRequest(const CompressPDFRequest& from);
  CompressPDFRequest(CompressPDFRequest&& from) noexcept
    : CompressPDFRequest() {
    *this = ::std::move(from);
  }

  inline CompressPDFRequest& operator=(const CompressPDFRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompressPDFRequest& operator=(CompressPDFRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompressPDFRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompressPDFRequest* internal_default_instance() {
    return reinterpret_cast<const CompressPDFRequest*>(
               &_CompressPDFRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompressPDFRequest& a, CompressPDFRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompressPDFRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompressPDFRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompressPDFRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompressPDFRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CompressPDFRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CompressPDFRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_processor.CompressPDFRequest";
  }
  protected:
  explicit CompressPDFRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:file_processor.CompressPDFRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_file_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class ConvertToTXTRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:file_processor.ConvertToTXTRequest) */ {
 public:
  inline ConvertToTXTRequest() : ConvertToTXTRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ConvertToTXTRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConvertToTXTRequest(const ConvertToTXTRequest& from);
  ConvertToTXTRequest(ConvertToTXTRequest&& from) noexcept
    : ConvertToTXTRequest() {
    *this = ::std::move(from);
  }

  inline ConvertToTXTRequest& operator=(const ConvertToTXTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvertToTXTRequest& operator=(ConvertToTXTRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvertToTXTRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvertToTXTRequest* internal_default_instance() {
    return reinterpret_cast<const ConvertToTXTRequest*>(
               &_ConvertToTXTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConvertToTXTRequest& a, ConvertToTXTRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvertToTXTRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvertToTXTRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvertToTXTRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvertToTXTRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ConvertToTXTRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ConvertToTXTRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_processor.ConvertToTXTRequest";
  }
  protected:
  explicit ConvertToTXTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:file_processor.ConvertToTXTRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_file_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class ConvertImageFormatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_processor.ConvertImageFormatRequest) */ {
 public:
  inline ConvertImageFormatRequest() : ConvertImageFormatRequest(nullptr) {}
  ~ConvertImageFormatRequest() override;
  explicit PROTOBUF_CONSTEXPR ConvertImageFormatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConvertImageFormatRequest(const ConvertImageFormatRequest& from);
  ConvertImageFormatRequest(ConvertImageFormatRequest&& from) noexcept
    : ConvertImageFormatRequest() {
    *this = ::std::move(from);
  }

  inline ConvertImageFormatRequest& operator=(const ConvertImageFormatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvertImageFormatRequest& operator=(ConvertImageFormatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvertImageFormatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvertImageFormatRequest* internal_default_instance() {
    return reinterpret_cast<const ConvertImageFormatRequest*>(
               &_ConvertImageFormatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConvertImageFormatRequest& a, ConvertImageFormatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvertImageFormatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvertImageFormatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvertImageFormatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvertImageFormatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConvertImageFormatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConvertImageFormatRequest& from) {
    ConvertImageFormatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvertImageFormatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_processor.ConvertImageFormatRequest";
  }
  protected:
  explicit ConvertImageFormatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFormatFieldNumber = 1,
  };
  // string output_format = 1;
  void clear_output_format();
  const std::string& output_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_format();
  PROTOBUF_NODISCARD std::string* release_output_format();
  void set_allocated_output_format(std::string* output_format);
  private:
  const std::string& _internal_output_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_format(const std::string& value);
  std::string* _internal_mutable_output_format();
  public:

  // @@protoc_insertion_point(class_scope:file_processor.ConvertImageFormatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class ResizeImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_processor.ResizeImageRequest) */ {
 public:
  inline ResizeImageRequest() : ResizeImageRequest(nullptr) {}
  ~ResizeImageRequest() override;
  explicit PROTOBUF_CONSTEXPR ResizeImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResizeImageRequest(const ResizeImageRequest& from);
  ResizeImageRequest(ResizeImageRequest&& from) noexcept
    : ResizeImageRequest() {
    *this = ::std::move(from);
  }

  inline ResizeImageRequest& operator=(const ResizeImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeImageRequest& operator=(ResizeImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResizeImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResizeImageRequest* internal_default_instance() {
    return reinterpret_cast<const ResizeImageRequest*>(
               &_ResizeImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResizeImageRequest& a, ResizeImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizeImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizeImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResizeImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResizeImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResizeImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResizeImageRequest& from) {
    ResizeImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeImageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_processor.ResizeImageRequest";
  }
  protected:
  explicit ResizeImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // int32 width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:file_processor.ResizeImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class FileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_processor.FileResponse) */ {
 public:
  inline FileResponse() : FileResponse(nullptr) {}
  ~FileResponse() override;
  explicit PROTOBUF_CONSTEXPR FileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileResponse(const FileResponse& from);
  FileResponse(FileResponse&& from) noexcept
    : FileResponse() {
    *this = ::std::move(from);
  }

  inline FileResponse& operator=(const FileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileResponse& operator=(FileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileResponse* internal_default_instance() {
    return reinterpret_cast<const FileResponse*>(
               &_FileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FileResponse& a, FileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileResponse& from) {
    FileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_processor.FileResponse";
  }
  protected:
  explicit FileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kStatusMessageFieldNumber = 3,
    kFileContentFieldNumber = 2,
    kSuccessFieldNumber = 4,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string status_message = 3;
  void clear_status_message();
  const std::string& status_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_message();
  PROTOBUF_NODISCARD std::string* release_status_message();
  void set_allocated_status_message(std::string* status_message);
  private:
  const std::string& _internal_status_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_message(const std::string& value);
  std::string* _internal_mutable_status_message();
  public:

  // .file_processor.FileChunk file_content = 2;
  bool has_file_content() const;
  private:
  bool _internal_has_file_content() const;
  public:
  void clear_file_content();
  const ::file_processor::FileChunk& file_content() const;
  PROTOBUF_NODISCARD ::file_processor::FileChunk* release_file_content();
  ::file_processor::FileChunk* mutable_file_content();
  void set_allocated_file_content(::file_processor::FileChunk* file_content);
  private:
  const ::file_processor::FileChunk& _internal_file_content() const;
  ::file_processor::FileChunk* _internal_mutable_file_content();
  public:
  void unsafe_arena_set_allocated_file_content(
      ::file_processor::FileChunk* file_content);
  ::file_processor::FileChunk* unsafe_arena_release_file_content();

  // bool success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:file_processor.FileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_message_;
    ::file_processor::FileChunk* file_content_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fprocessor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileChunk

// bytes content = 1;
inline void FileChunk::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& FileChunk::content() const {
  // @@protoc_insertion_point(field_get:file_processor.FileChunk.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileChunk::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file_processor.FileChunk.content)
}
inline std::string* FileChunk::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:file_processor.FileChunk.content)
  return _s;
}
inline const std::string& FileChunk::_internal_content() const {
  return _impl_.content_.Get();
}
inline void FileChunk::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* FileChunk::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* FileChunk::release_content() {
  // @@protoc_insertion_point(field_release:file_processor.FileChunk.content)
  return _impl_.content_.Release();
}
inline void FileChunk::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileChunk.content)
}

// -------------------------------------------------------------------

// FileRequest

// string file_name = 1;
inline void FileRequest::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:file_processor.FileRequest.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileRequest::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file_processor.FileRequest.file_name)
}
inline std::string* FileRequest::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:file_processor.FileRequest.file_name)
  return _s;
}
inline const std::string& FileRequest::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileRequest::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileRequest::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:file_processor.FileRequest.file_name)
  return _impl_.file_name_.Release();
}
inline void FileRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileRequest.file_name)
}

// .file_processor.FileChunk file_content = 2;
inline bool FileRequest::_internal_has_file_content() const {
  return this != internal_default_instance() && _impl_.file_content_ != nullptr;
}
inline bool FileRequest::has_file_content() const {
  return _internal_has_file_content();
}
inline void FileRequest::clear_file_content() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_content_ != nullptr) {
    delete _impl_.file_content_;
  }
  _impl_.file_content_ = nullptr;
}
inline const ::file_processor::FileChunk& FileRequest::_internal_file_content() const {
  const ::file_processor::FileChunk* p = _impl_.file_content_;
  return p != nullptr ? *p : reinterpret_cast<const ::file_processor::FileChunk&>(
      ::file_processor::_FileChunk_default_instance_);
}
inline const ::file_processor::FileChunk& FileRequest::file_content() const {
  // @@protoc_insertion_point(field_get:file_processor.FileRequest.file_content)
  return _internal_file_content();
}
inline void FileRequest::unsafe_arena_set_allocated_file_content(
    ::file_processor::FileChunk* file_content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_content_);
  }
  _impl_.file_content_ = file_content;
  if (file_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_processor.FileRequest.file_content)
}
inline ::file_processor::FileChunk* FileRequest::release_file_content() {
  
  ::file_processor::FileChunk* temp = _impl_.file_content_;
  _impl_.file_content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::file_processor::FileChunk* FileRequest::unsafe_arena_release_file_content() {
  // @@protoc_insertion_point(field_release:file_processor.FileRequest.file_content)
  
  ::file_processor::FileChunk* temp = _impl_.file_content_;
  _impl_.file_content_ = nullptr;
  return temp;
}
inline ::file_processor::FileChunk* FileRequest::_internal_mutable_file_content() {
  
  if (_impl_.file_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::file_processor::FileChunk>(GetArenaForAllocation());
    _impl_.file_content_ = p;
  }
  return _impl_.file_content_;
}
inline ::file_processor::FileChunk* FileRequest::mutable_file_content() {
  ::file_processor::FileChunk* _msg = _internal_mutable_file_content();
  // @@protoc_insertion_point(field_mutable:file_processor.FileRequest.file_content)
  return _msg;
}
inline void FileRequest::set_allocated_file_content(::file_processor::FileChunk* file_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.file_content_;
  }
  if (file_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_content);
    if (message_arena != submessage_arena) {
      file_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_content, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.file_content_ = file_content;
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileRequest.file_content)
}

// .file_processor.CompressPDFRequest compress_pdf_params = 3;
inline bool FileRequest::_internal_has_compress_pdf_params() const {
  return parameters_case() == kCompressPdfParams;
}
inline bool FileRequest::has_compress_pdf_params() const {
  return _internal_has_compress_pdf_params();
}
inline void FileRequest::set_has_compress_pdf_params() {
  _impl_._oneof_case_[0] = kCompressPdfParams;
}
inline void FileRequest::clear_compress_pdf_params() {
  if (_internal_has_compress_pdf_params()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.parameters_.compress_pdf_params_;
    }
    clear_has_parameters();
  }
}
inline ::file_processor::CompressPDFRequest* FileRequest::release_compress_pdf_params() {
  // @@protoc_insertion_point(field_release:file_processor.FileRequest.compress_pdf_params)
  if (_internal_has_compress_pdf_params()) {
    clear_has_parameters();
    ::file_processor::CompressPDFRequest* temp = _impl_.parameters_.compress_pdf_params_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.parameters_.compress_pdf_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_processor::CompressPDFRequest& FileRequest::_internal_compress_pdf_params() const {
  return _internal_has_compress_pdf_params()
      ? *_impl_.parameters_.compress_pdf_params_
      : reinterpret_cast< ::file_processor::CompressPDFRequest&>(::file_processor::_CompressPDFRequest_default_instance_);
}
inline const ::file_processor::CompressPDFRequest& FileRequest::compress_pdf_params() const {
  // @@protoc_insertion_point(field_get:file_processor.FileRequest.compress_pdf_params)
  return _internal_compress_pdf_params();
}
inline ::file_processor::CompressPDFRequest* FileRequest::unsafe_arena_release_compress_pdf_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_processor.FileRequest.compress_pdf_params)
  if (_internal_has_compress_pdf_params()) {
    clear_has_parameters();
    ::file_processor::CompressPDFRequest* temp = _impl_.parameters_.compress_pdf_params_;
    _impl_.parameters_.compress_pdf_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileRequest::unsafe_arena_set_allocated_compress_pdf_params(::file_processor::CompressPDFRequest* compress_pdf_params) {
  clear_parameters();
  if (compress_pdf_params) {
    set_has_compress_pdf_params();
    _impl_.parameters_.compress_pdf_params_ = compress_pdf_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_processor.FileRequest.compress_pdf_params)
}
inline ::file_processor::CompressPDFRequest* FileRequest::_internal_mutable_compress_pdf_params() {
  if (!_internal_has_compress_pdf_params()) {
    clear_parameters();
    set_has_compress_pdf_params();
    _impl_.parameters_.compress_pdf_params_ = CreateMaybeMessage< ::file_processor::CompressPDFRequest >(GetArenaForAllocation());
  }
  return _impl_.parameters_.compress_pdf_params_;
}
inline ::file_processor::CompressPDFRequest* FileRequest::mutable_compress_pdf_params() {
  ::file_processor::CompressPDFRequest* _msg = _internal_mutable_compress_pdf_params();
  // @@protoc_insertion_point(field_mutable:file_processor.FileRequest.compress_pdf_params)
  return _msg;
}

// .file_processor.ConvertToTXTRequest convert_to_txt_params = 4;
inline bool FileRequest::_internal_has_convert_to_txt_params() const {
  return parameters_case() == kConvertToTxtParams;
}
inline bool FileRequest::has_convert_to_txt_params() const {
  return _internal_has_convert_to_txt_params();
}
inline void FileRequest::set_has_convert_to_txt_params() {
  _impl_._oneof_case_[0] = kConvertToTxtParams;
}
inline void FileRequest::clear_convert_to_txt_params() {
  if (_internal_has_convert_to_txt_params()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.parameters_.convert_to_txt_params_;
    }
    clear_has_parameters();
  }
}
inline ::file_processor::ConvertToTXTRequest* FileRequest::release_convert_to_txt_params() {
  // @@protoc_insertion_point(field_release:file_processor.FileRequest.convert_to_txt_params)
  if (_internal_has_convert_to_txt_params()) {
    clear_has_parameters();
    ::file_processor::ConvertToTXTRequest* temp = _impl_.parameters_.convert_to_txt_params_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.parameters_.convert_to_txt_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_processor::ConvertToTXTRequest& FileRequest::_internal_convert_to_txt_params() const {
  return _internal_has_convert_to_txt_params()
      ? *_impl_.parameters_.convert_to_txt_params_
      : reinterpret_cast< ::file_processor::ConvertToTXTRequest&>(::file_processor::_ConvertToTXTRequest_default_instance_);
}
inline const ::file_processor::ConvertToTXTRequest& FileRequest::convert_to_txt_params() const {
  // @@protoc_insertion_point(field_get:file_processor.FileRequest.convert_to_txt_params)
  return _internal_convert_to_txt_params();
}
inline ::file_processor::ConvertToTXTRequest* FileRequest::unsafe_arena_release_convert_to_txt_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_processor.FileRequest.convert_to_txt_params)
  if (_internal_has_convert_to_txt_params()) {
    clear_has_parameters();
    ::file_processor::ConvertToTXTRequest* temp = _impl_.parameters_.convert_to_txt_params_;
    _impl_.parameters_.convert_to_txt_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileRequest::unsafe_arena_set_allocated_convert_to_txt_params(::file_processor::ConvertToTXTRequest* convert_to_txt_params) {
  clear_parameters();
  if (convert_to_txt_params) {
    set_has_convert_to_txt_params();
    _impl_.parameters_.convert_to_txt_params_ = convert_to_txt_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_processor.FileRequest.convert_to_txt_params)
}
inline ::file_processor::ConvertToTXTRequest* FileRequest::_internal_mutable_convert_to_txt_params() {
  if (!_internal_has_convert_to_txt_params()) {
    clear_parameters();
    set_has_convert_to_txt_params();
    _impl_.parameters_.convert_to_txt_params_ = CreateMaybeMessage< ::file_processor::ConvertToTXTRequest >(GetArenaForAllocation());
  }
  return _impl_.parameters_.convert_to_txt_params_;
}
inline ::file_processor::ConvertToTXTRequest* FileRequest::mutable_convert_to_txt_params() {
  ::file_processor::ConvertToTXTRequest* _msg = _internal_mutable_convert_to_txt_params();
  // @@protoc_insertion_point(field_mutable:file_processor.FileRequest.convert_to_txt_params)
  return _msg;
}

// .file_processor.ConvertImageFormatRequest convert_image_format_params = 5;
inline bool FileRequest::_internal_has_convert_image_format_params() const {
  return parameters_case() == kConvertImageFormatParams;
}
inline bool FileRequest::has_convert_image_format_params() const {
  return _internal_has_convert_image_format_params();
}
inline void FileRequest::set_has_convert_image_format_params() {
  _impl_._oneof_case_[0] = kConvertImageFormatParams;
}
inline void FileRequest::clear_convert_image_format_params() {
  if (_internal_has_convert_image_format_params()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.parameters_.convert_image_format_params_;
    }
    clear_has_parameters();
  }
}
inline ::file_processor::ConvertImageFormatRequest* FileRequest::release_convert_image_format_params() {
  // @@protoc_insertion_point(field_release:file_processor.FileRequest.convert_image_format_params)
  if (_internal_has_convert_image_format_params()) {
    clear_has_parameters();
    ::file_processor::ConvertImageFormatRequest* temp = _impl_.parameters_.convert_image_format_params_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.parameters_.convert_image_format_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_processor::ConvertImageFormatRequest& FileRequest::_internal_convert_image_format_params() const {
  return _internal_has_convert_image_format_params()
      ? *_impl_.parameters_.convert_image_format_params_
      : reinterpret_cast< ::file_processor::ConvertImageFormatRequest&>(::file_processor::_ConvertImageFormatRequest_default_instance_);
}
inline const ::file_processor::ConvertImageFormatRequest& FileRequest::convert_image_format_params() const {
  // @@protoc_insertion_point(field_get:file_processor.FileRequest.convert_image_format_params)
  return _internal_convert_image_format_params();
}
inline ::file_processor::ConvertImageFormatRequest* FileRequest::unsafe_arena_release_convert_image_format_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_processor.FileRequest.convert_image_format_params)
  if (_internal_has_convert_image_format_params()) {
    clear_has_parameters();
    ::file_processor::ConvertImageFormatRequest* temp = _impl_.parameters_.convert_image_format_params_;
    _impl_.parameters_.convert_image_format_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileRequest::unsafe_arena_set_allocated_convert_image_format_params(::file_processor::ConvertImageFormatRequest* convert_image_format_params) {
  clear_parameters();
  if (convert_image_format_params) {
    set_has_convert_image_format_params();
    _impl_.parameters_.convert_image_format_params_ = convert_image_format_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_processor.FileRequest.convert_image_format_params)
}
inline ::file_processor::ConvertImageFormatRequest* FileRequest::_internal_mutable_convert_image_format_params() {
  if (!_internal_has_convert_image_format_params()) {
    clear_parameters();
    set_has_convert_image_format_params();
    _impl_.parameters_.convert_image_format_params_ = CreateMaybeMessage< ::file_processor::ConvertImageFormatRequest >(GetArenaForAllocation());
  }
  return _impl_.parameters_.convert_image_format_params_;
}
inline ::file_processor::ConvertImageFormatRequest* FileRequest::mutable_convert_image_format_params() {
  ::file_processor::ConvertImageFormatRequest* _msg = _internal_mutable_convert_image_format_params();
  // @@protoc_insertion_point(field_mutable:file_processor.FileRequest.convert_image_format_params)
  return _msg;
}

// .file_processor.ResizeImageRequest resize_image_params = 6;
inline bool FileRequest::_internal_has_resize_image_params() const {
  return parameters_case() == kResizeImageParams;
}
inline bool FileRequest::has_resize_image_params() const {
  return _internal_has_resize_image_params();
}
inline void FileRequest::set_has_resize_image_params() {
  _impl_._oneof_case_[0] = kResizeImageParams;
}
inline void FileRequest::clear_resize_image_params() {
  if (_internal_has_resize_image_params()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.parameters_.resize_image_params_;
    }
    clear_has_parameters();
  }
}
inline ::file_processor::ResizeImageRequest* FileRequest::release_resize_image_params() {
  // @@protoc_insertion_point(field_release:file_processor.FileRequest.resize_image_params)
  if (_internal_has_resize_image_params()) {
    clear_has_parameters();
    ::file_processor::ResizeImageRequest* temp = _impl_.parameters_.resize_image_params_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.parameters_.resize_image_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::file_processor::ResizeImageRequest& FileRequest::_internal_resize_image_params() const {
  return _internal_has_resize_image_params()
      ? *_impl_.parameters_.resize_image_params_
      : reinterpret_cast< ::file_processor::ResizeImageRequest&>(::file_processor::_ResizeImageRequest_default_instance_);
}
inline const ::file_processor::ResizeImageRequest& FileRequest::resize_image_params() const {
  // @@protoc_insertion_point(field_get:file_processor.FileRequest.resize_image_params)
  return _internal_resize_image_params();
}
inline ::file_processor::ResizeImageRequest* FileRequest::unsafe_arena_release_resize_image_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:file_processor.FileRequest.resize_image_params)
  if (_internal_has_resize_image_params()) {
    clear_has_parameters();
    ::file_processor::ResizeImageRequest* temp = _impl_.parameters_.resize_image_params_;
    _impl_.parameters_.resize_image_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileRequest::unsafe_arena_set_allocated_resize_image_params(::file_processor::ResizeImageRequest* resize_image_params) {
  clear_parameters();
  if (resize_image_params) {
    set_has_resize_image_params();
    _impl_.parameters_.resize_image_params_ = resize_image_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_processor.FileRequest.resize_image_params)
}
inline ::file_processor::ResizeImageRequest* FileRequest::_internal_mutable_resize_image_params() {
  if (!_internal_has_resize_image_params()) {
    clear_parameters();
    set_has_resize_image_params();
    _impl_.parameters_.resize_image_params_ = CreateMaybeMessage< ::file_processor::ResizeImageRequest >(GetArenaForAllocation());
  }
  return _impl_.parameters_.resize_image_params_;
}
inline ::file_processor::ResizeImageRequest* FileRequest::mutable_resize_image_params() {
  ::file_processor::ResizeImageRequest* _msg = _internal_mutable_resize_image_params();
  // @@protoc_insertion_point(field_mutable:file_processor.FileRequest.resize_image_params)
  return _msg;
}

inline bool FileRequest::has_parameters() const {
  return parameters_case() != PARAMETERS_NOT_SET;
}
inline void FileRequest::clear_has_parameters() {
  _impl_._oneof_case_[0] = PARAMETERS_NOT_SET;
}
inline FileRequest::ParametersCase FileRequest::parameters_case() const {
  return FileRequest::ParametersCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CompressPDFRequest

// -------------------------------------------------------------------

// ConvertToTXTRequest

// -------------------------------------------------------------------

// ConvertImageFormatRequest

// string output_format = 1;
inline void ConvertImageFormatRequest::clear_output_format() {
  _impl_.output_format_.ClearToEmpty();
}
inline const std::string& ConvertImageFormatRequest::output_format() const {
  // @@protoc_insertion_point(field_get:file_processor.ConvertImageFormatRequest.output_format)
  return _internal_output_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConvertImageFormatRequest::set_output_format(ArgT0&& arg0, ArgT... args) {
 
 _impl_.output_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file_processor.ConvertImageFormatRequest.output_format)
}
inline std::string* ConvertImageFormatRequest::mutable_output_format() {
  std::string* _s = _internal_mutable_output_format();
  // @@protoc_insertion_point(field_mutable:file_processor.ConvertImageFormatRequest.output_format)
  return _s;
}
inline const std::string& ConvertImageFormatRequest::_internal_output_format() const {
  return _impl_.output_format_.Get();
}
inline void ConvertImageFormatRequest::_internal_set_output_format(const std::string& value) {
  
  _impl_.output_format_.Set(value, GetArenaForAllocation());
}
inline std::string* ConvertImageFormatRequest::_internal_mutable_output_format() {
  
  return _impl_.output_format_.Mutable(GetArenaForAllocation());
}
inline std::string* ConvertImageFormatRequest::release_output_format() {
  // @@protoc_insertion_point(field_release:file_processor.ConvertImageFormatRequest.output_format)
  return _impl_.output_format_.Release();
}
inline void ConvertImageFormatRequest::set_allocated_output_format(std::string* output_format) {
  if (output_format != nullptr) {
    
  } else {
    
  }
  _impl_.output_format_.SetAllocated(output_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_format_.IsDefault()) {
    _impl_.output_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file_processor.ConvertImageFormatRequest.output_format)
}

// -------------------------------------------------------------------

// ResizeImageRequest

// int32 width = 1;
inline void ResizeImageRequest::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t ResizeImageRequest::_internal_width() const {
  return _impl_.width_;
}
inline int32_t ResizeImageRequest::width() const {
  // @@protoc_insertion_point(field_get:file_processor.ResizeImageRequest.width)
  return _internal_width();
}
inline void ResizeImageRequest::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void ResizeImageRequest::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:file_processor.ResizeImageRequest.width)
}

// int32 height = 2;
inline void ResizeImageRequest::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t ResizeImageRequest::_internal_height() const {
  return _impl_.height_;
}
inline int32_t ResizeImageRequest::height() const {
  // @@protoc_insertion_point(field_get:file_processor.ResizeImageRequest.height)
  return _internal_height();
}
inline void ResizeImageRequest::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void ResizeImageRequest::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:file_processor.ResizeImageRequest.height)
}

// -------------------------------------------------------------------

// FileResponse

// string file_name = 1;
inline void FileResponse::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FileResponse::file_name() const {
  // @@protoc_insertion_point(field_get:file_processor.FileResponse.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileResponse::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file_processor.FileResponse.file_name)
}
inline std::string* FileResponse::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:file_processor.FileResponse.file_name)
  return _s;
}
inline const std::string& FileResponse::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileResponse::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileResponse::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileResponse::release_file_name() {
  // @@protoc_insertion_point(field_release:file_processor.FileResponse.file_name)
  return _impl_.file_name_.Release();
}
inline void FileResponse::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileResponse.file_name)
}

// .file_processor.FileChunk file_content = 2;
inline bool FileResponse::_internal_has_file_content() const {
  return this != internal_default_instance() && _impl_.file_content_ != nullptr;
}
inline bool FileResponse::has_file_content() const {
  return _internal_has_file_content();
}
inline void FileResponse::clear_file_content() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_content_ != nullptr) {
    delete _impl_.file_content_;
  }
  _impl_.file_content_ = nullptr;
}
inline const ::file_processor::FileChunk& FileResponse::_internal_file_content() const {
  const ::file_processor::FileChunk* p = _impl_.file_content_;
  return p != nullptr ? *p : reinterpret_cast<const ::file_processor::FileChunk&>(
      ::file_processor::_FileChunk_default_instance_);
}
inline const ::file_processor::FileChunk& FileResponse::file_content() const {
  // @@protoc_insertion_point(field_get:file_processor.FileResponse.file_content)
  return _internal_file_content();
}
inline void FileResponse::unsafe_arena_set_allocated_file_content(
    ::file_processor::FileChunk* file_content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_content_);
  }
  _impl_.file_content_ = file_content;
  if (file_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:file_processor.FileResponse.file_content)
}
inline ::file_processor::FileChunk* FileResponse::release_file_content() {
  
  ::file_processor::FileChunk* temp = _impl_.file_content_;
  _impl_.file_content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::file_processor::FileChunk* FileResponse::unsafe_arena_release_file_content() {
  // @@protoc_insertion_point(field_release:file_processor.FileResponse.file_content)
  
  ::file_processor::FileChunk* temp = _impl_.file_content_;
  _impl_.file_content_ = nullptr;
  return temp;
}
inline ::file_processor::FileChunk* FileResponse::_internal_mutable_file_content() {
  
  if (_impl_.file_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::file_processor::FileChunk>(GetArenaForAllocation());
    _impl_.file_content_ = p;
  }
  return _impl_.file_content_;
}
inline ::file_processor::FileChunk* FileResponse::mutable_file_content() {
  ::file_processor::FileChunk* _msg = _internal_mutable_file_content();
  // @@protoc_insertion_point(field_mutable:file_processor.FileResponse.file_content)
  return _msg;
}
inline void FileResponse::set_allocated_file_content(::file_processor::FileChunk* file_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.file_content_;
  }
  if (file_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_content);
    if (message_arena != submessage_arena) {
      file_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_content, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.file_content_ = file_content;
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileResponse.file_content)
}

// string status_message = 3;
inline void FileResponse::clear_status_message() {
  _impl_.status_message_.ClearToEmpty();
}
inline const std::string& FileResponse::status_message() const {
  // @@protoc_insertion_point(field_get:file_processor.FileResponse.status_message)
  return _internal_status_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileResponse::set_status_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file_processor.FileResponse.status_message)
}
inline std::string* FileResponse::mutable_status_message() {
  std::string* _s = _internal_mutable_status_message();
  // @@protoc_insertion_point(field_mutable:file_processor.FileResponse.status_message)
  return _s;
}
inline const std::string& FileResponse::_internal_status_message() const {
  return _impl_.status_message_.Get();
}
inline void FileResponse::_internal_set_status_message(const std::string& value) {
  
  _impl_.status_message_.Set(value, GetArenaForAllocation());
}
inline std::string* FileResponse::_internal_mutable_status_message() {
  
  return _impl_.status_message_.Mutable(GetArenaForAllocation());
}
inline std::string* FileResponse::release_status_message() {
  // @@protoc_insertion_point(field_release:file_processor.FileResponse.status_message)
  return _impl_.status_message_.Release();
}
inline void FileResponse::set_allocated_status_message(std::string* status_message) {
  if (status_message != nullptr) {
    
  } else {
    
  }
  _impl_.status_message_.SetAllocated(status_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_message_.IsDefault()) {
    _impl_.status_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file_processor.FileResponse.status_message)
}

// bool success = 4;
inline void FileResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool FileResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool FileResponse::success() const {
  // @@protoc_insertion_point(field_get:file_processor.FileResponse.success)
  return _internal_success();
}
inline void FileResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void FileResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:file_processor.FileResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_processor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fprocessor_2eproto
